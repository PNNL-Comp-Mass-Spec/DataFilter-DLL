#include <stdio.h>
#include <stdlib.h>
#include <io.h>
#include <math.h>
#include <memory.h>
#include <signal.h>
#include <windows.h>
#include <winnt.h>
#include "nrutil.h"

static float minarg1, minarg2;
#define FMIN(a,b) (minarg1=(a),minarg2=(b),(minarg1)<(minarg2) ? (minarg1) : (minarg2))

#define TINY 1.0e-20;

void ludcmp(a,n,indx,d)
int n,*indx;
float **a,*d;
{
	int i,imax,j,k;
	float big,dum,sum,temp;
	float *vv,*vector();
	void nrerror(),free_vector();

	vv=vector(1,n);
	*d=1.0;
	for (i=1;i<=n;i++) {
		big=0.0;
		for (j=1;j<=n;j++)
			if ((temp=fabs(a[i][j])) > big) big=temp;
		if (big == 0.0) nrerror("Singular matrix in routine LUDCMP");
		vv[i]=1.0/big;
	}
	for (j=1;j<=n;j++) {
		for (i=1;i<j;i++) {
			sum=a[i][j];
			for (k=1;k<i;k++) sum -= a[i][k]*a[k][j];
			a[i][j]=sum;
		}
		big=0.0;
		for (i=j;i<=n;i++) {
			sum=a[i][j];
			for (k=1;k<j;k++)
				sum -= a[i][k]*a[k][j];
			a[i][j]=sum;
			if ( (dum=vv[i]*fabs(sum)) >= big) {
				big=dum;
				imax=i;
			}
		}
		if (j != imax) {
			for (k=1;k<=n;k++) {
				dum=a[imax][k];
				a[imax][k]=a[j][k];
				a[j][k]=dum;
			}
			*d = -(*d);
			vv[imax]=vv[j];
		}
		indx[j]=imax;
		if (a[j][j] == 0.0) a[j][j]=TINY;
		if (j != n) {
			dum=1.0/(a[j][j]);
			for (i=j+1;i<=n;i++) a[i][j] *= dum;
		}
	}
	free_vector(vv,1,n);
}

#undef TINY

void lubksb(a,n,indx,b)
float **a,b[];
int n,*indx;
{
	int i,ii=0,ip,j;
	float sum;

	for (i=1;i<=n;i++) {
		ip=indx[i];
		sum=b[ip];
		b[ip]=b[i];
		if (ii)
			for (j=ii;j<=i-1;j++) sum -= a[i][j]*b[j];
		else if (sum) ii=i;
		b[i]=sum;
	}
	for (i=n;i>=1;i--) {
		sum=b[i];
		for (j=i+1;j<=n;j++) sum -= a[i][j]*b[j];
		b[i]=sum/a[i][i];
	}
}


int pascal _export savgol(float__gc c[], int np, int nl,int nr, int ld, int m)
{
   void lubksb(float **a, int n, int *indx, float b[]);
   void ludcmp(float **a, int n, int *indx, float *d);
   int  imj,ipj,j,k,kk,mm,*indx;
   float d,fac,sum,**a,*b;
   
   if(np < nl+nr+1 || nl < 0 || nr < 0 || ld > m || nl+nr < m) return(-1);
   indx=ivector(1,m+1);
	a=matrix(1,m+1,1,m+1);
	b=vector(1,m+1);
	for(ipj=0;ipj<=(m<<1);ipj++)
   {
      sum = (ipj ? 0.0 : 1.0);
      for(k=1;k<=nr;k++) sum += pow((double)k,(double)ipj);
      for(k=1;k<=nl;k++) sum += pow((double)-k,(double)ipj);
      mm=FMIN(ipj,2*m-ipj);
      for(imj = -mm;imj<=mm;imj+=2) a[1+(ipj+imj)/2][1+(ipj-imj)/2]=sum;
   }
	ludcmp(a,m+1,indx,&d);
   for(j=1;j<=m+1;j++) b[j]=0.0;
   b[ld+1]=1.0;
   lubksb(a,m+1,indx,b);
   for(kk=1;kk<=np;kk++) c[kk]=0.0;
   for(k=-nl;k<=nr;k++)
   {
      sum=b[1];
      fac=1.0;
      for(mm=1;mm<=m;mm++) sum += b[mm+1]*(fac *= k);
      kk=((np-k) % np)+1;
      c[kk]=sum;
   }
   free_vector(b,1,m+1);
   free_matrix(a,1,m+1,1,m+1);
	free_ivector(indx,1,m+1);
   return(0);
}